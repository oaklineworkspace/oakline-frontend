I’m building Oakline Bank, and I need you to add a complete password management system using Supabase Auth.

⚠️ Important instructions:
	•	Do not hardcode any values.
	•	All environment variables (Supabase keys, URLs, SMTP credentials, etc.) are already added in Replit Secrets.
	•	Always use process.env for configuration.

⸻

🔐 1. Change Password (for logged-in users)
	•	Add a route /profile/change-password
	•	Create a form with:
	•	Current Password
	•	New Password
	•	Confirm New Password
	•	When submitted:
	•	Reauthenticate the user

•	Show success message: “Your password has been updated successfully.”
	•	If invalid, show a clear error message.

🔄 2. Forgot / Reset Password (for users who forgot password)
	•	Add a “Forgot Password?” link on the login page.
	•	When clicked, open a page where users enter their email.
	•	Trigger Supabase reset email using:

form:
	•	New Password
	•	Confirm New Password
	•	When submitted:

•	Redirect to login page after success with message:
“Password reset successfully. You can now log in.”

⸻

💌 3. Email Integration
	•	Use Supabase’s built-in password reset email system.
	•	Do not send custom emails manually.
	•	Sender name should appear as Oakline Bank (using SMTP setup from secrets).
	•	Use the existing SMTP aliases for other email types (welcome, updates, notify, etc.).

⸻

🎨 4. UI Design
	•	Use Oakline Bank logo from /assets/logo.png
	•	Colors: navy (#1e2a47), white, light gray for input borders.
	•	Responsive layout with card-style form.
	•	Add footer note:
“Need help? Contact support@theoaklinebank.com”

⸻

🔒 5. Security & Validation
	•	Do not log passwords.
	•	Validate new password and confirm password match.
	•	Enforce password rules: at least 8 characters, one uppercase, one number.

⸻

✅ 6. Success Flow
	•	After password change → show green success alert.
	•	After reset → redirect to /login with confirmation message.

⸻

Everything must use the Supabase client and environment variables from Replit Secrets — no hardcoded credentials or URLs anywhere in the code.
