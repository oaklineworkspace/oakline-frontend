-- ==========================================
-- 0. Ensure email is verified before application insert
-- ==========================================

CREATE OR REPLACE FUNCTION verify_email_before_insert_application()
RETURNS trigger AS $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM public.email_verifications
        WHERE email = NEW.email AND verified_at IS NOT NULL
    ) THEN
        RAISE EXCEPTION 'Email must be verified before submitting application';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS trigger_verify_email_before_insert ON public.applications;

CREATE TRIGGER trigger_verify_email_before_insert
BEFORE INSERT ON public.applications
FOR EACH ROW
EXECUTE FUNCTION verify_email_before_insert_application();

-- ==========================================
-- 1. Notification on new application submission
-- ==========================================

CREATE OR REPLACE FUNCTION notify_on_new_application()
RETURNS trigger AS $$
DECLARE
    notif_title text := 'Application Submitted';
    notif_message text := 'Your application has been successfully submitted. We will review it and notify you of any updates.';
BEGIN
    -- In-app notification
    INSERT INTO public.notifications (
        user_id,
        type,
        title,
        message,
        created_at,
        updated_at
    ) VALUES (
        NEW.user_id,
        'application',
        notif_title,
        notif_message,
        NOW(),
        NOW()
    );

    -- Email queue
    INSERT INTO public.email_queue (
        user_id,
        email,
        subject,
        body,
        created_at,
        updated_at
    ) VALUES (
        NEW.user_id,
        NEW.email,
        notif_title,
        notif_message,
        NOW(),
        NOW()
    );

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS trigger_notify_on_new_application ON public.applications;

CREATE TRIGGER trigger_notify_on_new_application
AFTER INSERT ON public.applications
FOR EACH ROW
EXECUTE FUNCTION notify_on_new_application();

-- ==========================================
-- 2. Notification on application status change
-- ==========================================

CREATE OR REPLACE FUNCTION notify_on_application_status_change()
RETURNS trigger AS $$
DECLARE
    notif_title text;
    notif_message text;
BEGIN
    IF NEW.application_status IS DISTINCT FROM OLD.application_status THEN
        CASE NEW.application_status
            WHEN 'approved' THEN
                notif_title := 'Application Approved';
                notif_message := 'Congratulations! Your application has been approved. Welcome to the bank.';
            WHEN 'rejected' THEN
                notif_title := 'Application Rejected';
                notif_message := 'We are sorry. Your application has been rejected. Please contact support for details.';
            WHEN 'under_review' THEN
                notif_title := 'Application Under Review';
                notif_message := 'Your application is currently under review. We will notify you once a decision is made.';
            WHEN 'completed' THEN
                notif_title := 'Application Completed';
                notif_message := 'Your application process is completed. You can now access your account.';
            ELSE
                RETURN NEW;
        END CASE;

        -- In-app notification
        INSERT INTO public.notifications (
            user_id,
            type,
            title,
            message,
            created_at,
            updated_at
        ) VALUES (
            NEW.user_id,
            'application',
            notif_title,
            notif_message,
            NOW(),
            NOW()
        );

        -- Email queue
        INSERT INTO public.email_queue (
            user_id,
            email,
            subject,
            body,
            created_at,
            updated_at
        ) VALUES (
            NEW.user_id,
            NEW.email,
            notif_title,
            notif_message,
            NOW(),
            NOW()
        );
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS trigger_notify_on_application_status_change ON public.applications;

CREATE TRIGGER trigger_notify_on_application_status_change
AFTER UPDATE ON public.applications
FOR EACH ROW
EXECUTE FUNCTION notify_on_application_status_change();

-- ==========================================
-- 3. Admin approval workflow: create user, account, card, log actions, send welcome email
-- ==========================================

CREATE OR REPLACE FUNCTION process_application_approval()
RETURNS trigger AS $$
DECLARE
    temp_password text;
    new_user_id uuid;
    new_account_id uuid;
    new_card_id uuid;
BEGIN
    IF NEW.application_status = 'approved' AND OLD.application_status IS DISTINCT FROM NEW.application_status THEN

        -- Generate temporary password
        temp_password := substring(md5(random()::text), 1, 10);

        -- Create new user (replace with real auth call in production)
        new_user_id := gen_random_uuid();

        -- Insert into profiles
        INSERT INTO public.profiles (
            id,
            email,
            first_name,
            middle_name,
            last_name,
            phone,
            date_of_birth,
            country,
            city,
            state,
            zip_code,
            address,
            ssn,
            id_number,
            employment_status,
            annual_income,
            mothers_maiden_name,
            account_types,
            application_status,
            created_at,
            updated_at
        ) VALUES (
            new_user_id,
            NEW.email,
            NEW.first_name,
            NEW.middle_name,
            NEW.last_name,
            NEW.phone,
            NEW.date_of_birth,
            NEW.country,
            NEW.city,
            NEW.state,
            NEW.zip_code,
            NEW.address,
            NEW.ssn,
            NEW.id_number,
            NEW.employment_status,
            NEW.annual_income,
            NEW.mothers_maiden_name,
            NEW.account_types,
            'approved',
            NOW(),
            NOW()
        );

        -- Insert into accounts
        new_account_id := gen_random_uuid();
        INSERT INTO public.accounts (
            id,
            user_id,
            application_id,
            account_number,
            routing_number,
            account_type,
            balance,
            status,
            created_at,
            updated_at
        ) VALUES (
            new_account_id,
            new_user_id,
            NEW.id,
            substring(md5(random()::text), 1, 12),
            '075915826',
            NEW.account_types[1],
            0,
            'active',
            NOW(),
            NOW()
        );

        -- Insert default debit card
        new_card_id := gen_random_uuid();
        INSERT INTO public.cards (
            id,
            user_id,
            account_id,
            card_number,
            card_type,
            status,
            expiry_date,
            created_at,
            updated_at,
            activated_at
        ) VALUES (
            new_card_id,
            new_user_id,
            new_account_id,
            substring(md5(random()::text), 1, 16),
            'debit',
            'active',
            (CURRENT_DATE + INTERVAL '3 year')::date,
            NOW(),
            NOW(),
            NOW()
        );

        -- Update processed_at
        UPDATE public.applications
        SET processed_at = NOW()
        WHERE id = NEW.id;

        -- Welcome email
        INSERT INTO public.email_queue (
            user_id,
            email,
            subject,
            body,
            created_at,
            updated_at
        ) VALUES (
            new_user_id,
            NEW.email,
            'Welcome to the Bank!',
            'Your application has been approved. Login with your email and temporary password: ' || temp_password,
            NOW(),
            NOW()
        );

        -- Audit log
        INSERT INTO public.audit_logs (
            user_id,
            action,
            table_name,
            old_data,
            new_data,
            created_at,
            updated_at
        ) VALUES (
            new_user_id,
            'application_approved',
            'applications',
            row_to_json(OLD),
            row_to_json(NEW),
            NOW(),
            NOW()
        );

        -- System log
        INSERT INTO public.system_logs (
            level,
            type,
            message,
            user_id,
            admin_id,
            created_at,
            updated_at
        ) VALUES (
            'info',
            'user',
            'Application approved and user account created.',
            new_user_id,
            NULL,
            NOW(),
            NOW()
        );

    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS trigger_process_application_approval ON public.applications;

CREATE TRIGGER trigger_process_application_approval
AFTER UPDATE ON public.applications
FOR EACH ROW
EXECUTE FUNCTION process_application_approval();