-- ==========================================
-- 0. Ensure email is verified before application insert
-- ==========================================

CREATE OR REPLACE FUNCTION verify_email_before_insert_application()
RETURNS trigger AS $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM public.email_verifications
        WHERE email = NEW.email AND verified_at IS NOT NULL
    ) THEN
        RAISE EXCEPTION 'Email must be verified before submitting application';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS trigger_verify_email_before_insert ON public.applications;

CREATE TRIGGER trigger_verify_email_before_insert
BEFORE INSERT ON public.applications
FOR EACH ROW
EXECUTE FUNCTION verify_email_before_insert_application();

-- ==========================================
-- 1. Notification on new application submission
-- ==========================================

CREATE OR REPLACE FUNCTION notify_on_new_application()
RETURNS trigger AS $$
DECLARE
    notif_title text := 'Application Submitted';
    notif_message text := 'Your application has been successfully submitted. We will review it and notify you of any updates.';
BEGIN
    INSERT INTO public.notifications (
        user_id,
        type,
        title,
        message,
        created_at,
        updated_at
    ) VALUES (
        NEW.user_id,
        'application',
        notif_title,
        notif_message,
        NOW(),
        NOW()
    );

    INSERT INTO public.email_queue (
        user_id,
        email,
        subject,
        body,
        created_at,
        updated_at
    ) VALUES (
        NEW.user_id,
        NEW.email,
        notif_title,
        notif_message,
        NOW(),
        NOW()
    );

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS trigger_notify_on_new_application ON public.applications;

CREATE TRIGGER trigger_notify_on_new_application
AFTER INSERT ON public.applications
FOR EACH ROW
EXECUTE FUNCTION notify_on_new_application();

-- ==========================================
-- 2. Notification and logging on application status change
-- ==========================================

CREATE OR REPLACE FUNCTION notify_and_log_on_status_change()
RETURNS trigger AS $$
DECLARE
    notif_title text;
    notif_message text;
BEGIN
    IF NEW.application_status IS DISTINCT FROM OLD.application_status THEN
        CASE NEW.application_status
            WHEN 'approved' THEN
                notif_title := 'Application Approved';
                notif_message := 'Your application has been approved. An admin will create your account soon.';
            WHEN 'rejected' THEN
                notif_title := 'Application Rejected';
                notif_message := 'We are sorry. Your application has been rejected. Please contact support.';
            WHEN 'under_review' THEN
                notif_title := 'Application Under Review';
                notif_message := 'Your application is currently under review.';
            WHEN 'completed' THEN
                notif_title := 'Application Completed';
                notif_message := 'Your application process is completed.';
            ELSE
                RETURN NEW;
        END CASE;

        INSERT INTO public.notifications (
            user_id,
            type,
            title,
            message,
            created_at,
            updated_at
        ) VALUES (
            NEW.user_id,
            'application',
            notif_title,
            notif_message,
            NOW(),
            NOW()
        );

        INSERT INTO public.email_queue (
            user_id,
            email,
            subject,
            body,
            created_at,
            updated_at
        ) VALUES (
            NEW.user_id,
            NEW.email,
            notif_title,
            notif_message,
            NOW(),
            NOW()
        );

        INSERT INTO public.audit_logs (
            user_id,
            action,
            table_name,
            old_data,
            new_data,
            created_at,
            updated_at
        ) VALUES (
            NEW.user_id,
            'application_status_changed',
            'applications',
            row_to_json(OLD),
            row_to_json(NEW),
            NOW(),
            NOW()
        );

        INSERT INTO public.system_logs (
            level,
            type,
            message,
            user_id,
            admin_id,
            created_at,
            updated_at
        ) VALUES (
            'info',
            'user',
            'Application status changed to ' || NEW.application_status,
            NEW.user_id,
            NULL,
            NOW(),
            NOW()
        );
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS trigger_notify_and_log_on_status_change ON public.applications;

CREATE TRIGGER trigger_notify_and_log_on_status_change
AFTER UPDATE ON public.applications
FOR EACH ROW
EXECUTE FUNCTION notify_and_log_on_status_change();